
C8T6-CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080051d8  080051d8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051d8  080051d8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080051e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a2c  20000018  080051f8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a44  080051f8  00021a44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011af3  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ff  00000000  00000000  00031b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018963  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111c9  00000000  00000000  0004f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6a7  00000000  00000000  000604ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edb53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d24  00000000  00000000  000edba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080050f0 	.word	0x080050f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080050f0 	.word	0x080050f0

08000150 <CAN1_Filter_Init>:



//筛选器配置
void CAN1_Filter_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
	因此当具体Id要求为 0x0000,即二进制0000|0000|0000|0000。
	结合掩码实际就是筛选器最终允许通过的Id为
									  xxxx|xxx0|xxxx|xxx0  （x表示0或者1都可以）
	因此具体筛选器允许的Id范围是需要结合掩码来看的
	*/
		CAN1_FilerConf.FilterIdHigh=0X0012 << 5;					   //具体Id要求高16位
 8000156:	f44f 7310 	mov.w	r3, #576	; 0x240
 800015a:	603b      	str	r3, [r7, #0]
		CAN1_FilerConf.FilterIdLow=0X0000;					   //具体Id要求低16位
 800015c:	2300      	movs	r3, #0
 800015e:	607b      	str	r3, [r7, #4]
		CAN1_FilerConf.FilterMaskIdHigh=0X07FF<< 5;                //掩码高16位全设置为0，表示对所有位报文Id高16位都不关心
 8000160:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000164:	60bb      	str	r3, [r7, #8]
		CAN1_FilerConf.FilterMaskIdLow= 0;                //掩码低16位全设置为0，表示对所有位报文Id低16位都不关心 0|0x02
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
		CAN1_FilerConf.FilterFIFOAssignment=CAN_FILTER_FIFO0;  //筛选器接收到的报文放入到FIFO0中，即为接收邮箱0
 800016a:	2300      	movs	r3, #0
 800016c:	613b      	str	r3, [r7, #16]
		CAN1_FilerConf.FilterActivation=ENABLE;                //筛选器使能（开启）
 800016e:	2301      	movs	r3, #1
 8000170:	623b      	str	r3, [r7, #32]
		CAN1_FilerConf.FilterMode=CAN_FILTERMODE_IDMASK;       //筛选器掩码模式
 8000172:	2300      	movs	r3, #0
 8000174:	61bb      	str	r3, [r7, #24]
		CAN1_FilerConf.FilterScale=CAN_FILTERSCALE_32BIT;      //掩码用32位表示
 8000176:	2301      	movs	r3, #1
 8000178:	61fb      	str	r3, [r7, #28]
			如果用两个can，则要分配两个筛选器组。一个是FilterBank
			则
			can1的筛选器组选择0-13。如CAN1_FilerConf.FilterBank=0;
			can2的筛选器组选择14-27。如CAN1_FilerConf.SlaveStartFilterBank=14;
		*/
		CAN1_FilerConf.FilterBank=0;
 800017a:	2300      	movs	r3, #0
 800017c:	617b      	str	r3, [r7, #20]
		CAN1_FilerConf.SlaveStartFilterBank=14;
 800017e:	230e      	movs	r3, #14
 8000180:	627b      	str	r3, [r7, #36]	; 0x24
			这是因为STM32的双路CAN共用过滤器组，
			而且过滤器组寄存器与CAN1配置寄存器在物理上是挨着的，HAL库将这些寄存器合并在一个结构里访问而已。
			下面通过调用 "HAL_CAN_ConfigFilter(&hcan,&CAN1_FilerConf)" 配置can筛选器即可生效。
			无需再调用HAL_CAN_ConfigFilter(&hcan2,&CAN1_FilerConf)
		*/
		if(HAL_CAN_ConfigFilter(&hcan,&CAN1_FilerConf)!=HAL_OK)
 8000182:	463b      	mov	r3, r7
 8000184:	4619      	mov	r1, r3
 8000186:	4806      	ldr	r0, [pc, #24]	; (80001a0 <CAN1_Filter_Init+0x50>)
 8000188:	f000 fcc7 	bl	8000b1a <HAL_CAN_ConfigFilter>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d001      	beq.n	8000196 <CAN1_Filter_Init+0x46>
		{
				Error_Handler();
 8000192:	f000 fa36 	bl	8000602 <Error_Handler>
		}
}
 8000196:	bf00      	nop
 8000198:	3728      	adds	r7, #40	; 0x28
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20000080 	.word	0x20000080

080001a4 <CAN1_Send_Msg>:


uint8_t CAN1_Send_Msg(CANTxMsg_t *msg,uint16_t mailbox_id,uint8_t *sendbuff)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	60f8      	str	r0, [r7, #12]
 80001ac:	460b      	mov	r3, r1
 80001ae:	607a      	str	r2, [r7, #4]
 80001b0:	817b      	strh	r3, [r7, #10]
		uint8_t id;

		msg->TxMessage.StdId=mailbox_id;    		//邮箱id号
 80001b2:	897a      	ldrh	r2, [r7, #10]
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	605a      	str	r2, [r3, #4]
		msg->TxMessage.IDE=CAN_ID_STD; 				//邮件的id格式（标准为CAN_ID_STD	  |	  拓展为CAM_ID_EXT）
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2200      	movs	r2, #0
 80001bc:	60da      	str	r2, [r3, #12]
		msg->TxMessage.DLC=8;						//邮件数据长度 此处为8个字节
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	2208      	movs	r2, #8
 80001c2:	615a      	str	r2, [r3, #20]
		msg->TxMessage.RTR=CAN_RTR_DATA;			//数据帧 一般都是数据帧
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	2200      	movs	r2, #0
 80001c8:	611a      	str	r2, [r3, #16]
		msg->TxMessage.TransmitGlobalTime=DISABLE;  //默认DISABLE
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	2200      	movs	r2, #0
 80001ce:	761a      	strb	r2, [r3, #24]
		for(id=0;id<8;id++)
 80001d0:	2300      	movs	r3, #0
 80001d2:	75fb      	strb	r3, [r7, #23]
 80001d4:	e00b      	b.n	80001ee <CAN1_Send_Msg+0x4a>
		{
				msg->payload[id]=sendbuff[id];  //装填数据
 80001d6:	7dfb      	ldrb	r3, [r7, #23]
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	441a      	add	r2, r3
 80001dc:	7dfb      	ldrb	r3, [r7, #23]
 80001de:	7811      	ldrb	r1, [r2, #0]
 80001e0:	68fa      	ldr	r2, [r7, #12]
 80001e2:	4413      	add	r3, r2
 80001e4:	460a      	mov	r2, r1
 80001e6:	771a      	strb	r2, [r3, #28]
		for(id=0;id<8;id++)
 80001e8:	7dfb      	ldrb	r3, [r7, #23]
 80001ea:	3301      	adds	r3, #1
 80001ec:	75fb      	strb	r3, [r7, #23]
 80001ee:	7dfb      	ldrb	r3, [r7, #23]
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	d9f0      	bls.n	80001d6 <CAN1_Send_Msg+0x32>
		}

		//发送邮件 注意邮件邮件信息（id号，邮件类型等等）和数据内容是分开发送的，具体看下面这句函数参数
		if(HAL_CAN_AddTxMessage(&hcan,&msg->TxMessage,msg->payload,&msg->mailbox)!=HAL_OK)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1d19      	adds	r1, r3, #4
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f103 021c 	add.w	r2, r3, #28
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	4806      	ldr	r0, [pc, #24]	; (800021c <CAN1_Send_Msg+0x78>)
 8000202:	f000 fd97 	bl	8000d34 <HAL_CAN_AddTxMessage>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <CAN1_Send_Msg+0x6c>
				return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e000      	b.n	8000212 <CAN1_Send_Msg+0x6e>
		else
				return 1;
 8000210:	2301      	movs	r3, #1
}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000080 	.word	0x20000080

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
接收到邮件最终会来到这里。由于我们开了RX0中断，因此我们的回调函数名是
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
如果我们开的是RX1中断，那么回调函数名是void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan);
*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	//这句话是判断对方发来的信息是发给本板子的can1还是can2，如果是can1，那通过接线就知道是哪个设备发来的数据。
		if(hcan->Instance==CAN1)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d10e      	bne.n	8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		{
			/*
				这个是获取邮件的函数，既然进了接收中断，那么就说明接收到了数据因此我们调用下方函数获取。
				我们提供一个RxMessage以及payload分别接收邮件邮件信息（id号，邮件类型等等）和数据内容。
			*/
				if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&(RxMsg.RxMessage),(RxMsg.payload))==HAL_OK)
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000236:	2100      	movs	r1, #0
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 fe55 	bl	8000ee8 <HAL_CAN_GetRxMessage>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d103      	bne.n	800024c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
						rcvdFlag=1;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
				else
						Error_Handler();
		}
		//HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
}
 800024a:	e001      	b.n	8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
						Error_Handler();
 800024c:	f000 f9d9 	bl	8000602 <Error_Handler>
}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	20000074 	.word	0x20000074
 8000260:	20000058 	.word	0x20000058
 8000264:	2000007c 	.word	0x2000007c

08000268 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <MX_CAN_Init+0x64>)
 800026e:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <MX_CAN_Init+0x68>)
 8000270:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <MX_CAN_Init+0x64>)
 8000274:	2209      	movs	r2, #9
 8000276:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <MX_CAN_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <MX_CAN_Init+0x64>)
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_CAN_Init+0x64>)
 8000286:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800028a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_CAN_Init+0x64>)
 800028e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000292:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <MX_CAN_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_CAN_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_CAN_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_CAN_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_CAN_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_CAN_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_CAN_Init+0x64>)
 80002ba:	f000 fb33 	bl	8000924 <HAL_CAN_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002c4:	f000 f99d 	bl	8000602 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000080 	.word	0x20000080
 80002d0:	40006400 	.word	0x40006400

080002d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a20      	ldr	r2, [pc, #128]	; (8000370 <HAL_CAN_MspInit+0x9c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d139      	bne.n	8000368 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 80002fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002fe:	61d3      	str	r3, [r2, #28]
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a18      	ldr	r2, [pc, #96]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <HAL_CAN_MspInit+0xa0>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	480f      	ldr	r0, [pc, #60]	; (8000378 <HAL_CAN_MspInit+0xa4>)
 800033a:	f001 fa3d 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800033e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000344:	2302      	movs	r3, #2
 8000346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000348:	2303      	movs	r3, #3
 800034a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <HAL_CAN_MspInit+0xa4>)
 8000354:	f001 fa30 	bl	80017b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2105      	movs	r1, #5
 800035c:	2014      	movs	r0, #20
 800035e:	f001 f9f4 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000362:	2014      	movs	r0, #20
 8000364:	f001 fa0d 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40006400 	.word	0x40006400
 8000374:	40021000 	.word	0x40021000
 8000378:	40010800 	.word	0x40010800

0800037c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000380:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <MX_FREERTOS_Init+0x38>)
 8000382:	2100      	movs	r1, #0
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <MX_FREERTOS_Init+0x3c>)
 8000386:	f002 fa05 	bl	8002794 <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <MX_FREERTOS_Init+0x40>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of uart_task1 */
  uart_task1Handle = osThreadNew(StartTask02, NULL, &uart_task1_attributes);
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <MX_FREERTOS_Init+0x44>)
 8000392:	2100      	movs	r1, #0
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <MX_FREERTOS_Init+0x48>)
 8000396:	f002 f9fd 	bl	8002794 <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <MX_FREERTOS_Init+0x4c>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of uart_task2 */
  uart_task2Handle = osThreadNew(StartTask03, NULL, &uart_task2_attributes);
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <MX_FREERTOS_Init+0x50>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	480a      	ldr	r0, [pc, #40]	; (80003d0 <MX_FREERTOS_Init+0x54>)
 80003a6:	f002 f9f5 	bl	8002794 <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <MX_FREERTOS_Init+0x58>)
 80003ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	08005154 	.word	0x08005154
 80003b8:	080003d9 	.word	0x080003d9
 80003bc:	200000a8 	.word	0x200000a8
 80003c0:	08005178 	.word	0x08005178
 80003c4:	080003e9 	.word	0x080003e9
 80003c8:	200000ac 	.word	0x200000ac
 80003cc:	0800519c 	.word	0x0800519c
 80003d0:	08000455 	.word	0x08000455
 80003d4:	200000b0 	.word	0x200000b0

080003d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f002 fa81 	bl	80028e8 <osDelay>
 80003e6:	e7fb      	b.n	80003e0 <StartDefaultTask+0x8>

080003e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  CAN1_Send_Msg(&TxMsg, 0X11, SendMsg);      //第二个参数是报文ID，最大0-0x7FF
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <StartTask02+0x50>)
 80003f2:	2111      	movs	r1, #17
 80003f4:	4811      	ldr	r0, [pc, #68]	; (800043c <StartTask02+0x54>)
 80003f6:	f7ff fed5 	bl	80001a4 <CAN1_Send_Msg>

	  //判断是否接收到数据   rcvdFlag定义在can.c里面，在接收中断做了处理
	  if (rcvdFlag == 1)
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <StartTask02+0x58>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d112      	bne.n	8000428 <StartTask02+0x40>
	     {
	       rcvdFlag = 0;
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <StartTask02+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
	       if (RxMsg.payload[0] == 6)//判断是否收到正确的数据
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <StartTask02+0x5c>)
 800040a:	7f1b      	ldrb	r3, [r3, #28]
 800040c:	2b06      	cmp	r3, #6
 800040e:	d10b      	bne.n	8000428 <StartTask02+0x40>
	       {
	         HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//;LED状态反转
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <StartTask02+0x60>)
 8000416:	f001 fb6b 	bl	8001af0 <HAL_GPIO_TogglePin>
	         //收到正常数据会发送到上位机显示接收到的内容
	         HAL_UART_Transmit(&huart1,RxMsg.payload,8,0xffff);
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	2208      	movs	r2, #8
 8000420:	490a      	ldr	r1, [pc, #40]	; (800044c <StartTask02+0x64>)
 8000422:	480b      	ldr	r0, [pc, #44]	; (8000450 <StartTask02+0x68>)
 8000424:	f001 ffe5 	bl	80023f2 <HAL_UART_Transmit>
	       }
	     }
	  HAL_Delay(500);
 8000428:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042c:	f000 fa56 	bl	80008dc <HAL_Delay>
	  osDelay(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f002 fa59 	bl	80028e8 <osDelay>
	  CAN1_Send_Msg(&TxMsg, 0X11, SendMsg);      //第二个参数是报文ID，最大0-0x7FF
 8000436:	e7db      	b.n	80003f0 <StartTask02+0x8>
 8000438:	20000000 	.word	0x20000000
 800043c:	20000034 	.word	0x20000034
 8000440:	2000007c 	.word	0x2000007c
 8000444:	20000058 	.word	0x20000058
 8000448:	40011000 	.word	0x40011000
 800044c:	20000074 	.word	0x20000074
 8000450:	200000b4 	.word	0x200000b4

08000454 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  HAL_UART_Receive(&huart1, Rxbuf, 1, 20);
//	  HAL_UART_Transmit(&huart1,Rxbuf, 1, 20);
//	  HAL_Delay(500);
    osDelay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f002 fa43 	bl	80028e8 <osDelay>
 8000462:	e7fb      	b.n	800045c <StartTask03+0x8>

08000464 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <MX_GPIO_Init+0xc0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a29      	ldr	r2, [pc, #164]	; (8000524 <MX_GPIO_Init+0xc0>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a23      	ldr	r2, [pc, #140]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_GPIO_Init+0xc0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <MX_GPIO_Init+0xc4>)
 80004e0:	f001 faee 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <MX_GPIO_Init+0xc4>)
 80004fe:	f001 f95b 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = switch1_Pin;
 8000502:	2308      	movs	r3, #8
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(switch1_GPIO_Port, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_GPIO_Init+0xc8>)
 8000516:	f001 f94f 	bl	80017b8 <HAL_GPIO_Init>

}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	40011000 	.word	0x40011000
 800052c:	40010c00 	.word	0x40010c00

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f970 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f81e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f7ff ff92 	bl	8000464 <MX_GPIO_Init>
  MX_CAN_Init();
 8000540:	f7ff fe92 	bl	8000268 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f8cc 	bl	80006e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  //开启can1
  HAL_CAN_Start(&hcan);
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x44>)
 800054a:	f000 fbaf 	bl	8000cac <HAL_CAN_Start>
  //初始化can过滤器
  CAN1_Filter_Init();
 800054e:	f7ff fdff 	bl	8000150 <CAN1_Filter_Init>

  //开启can中断
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000552:	2102      	movs	r1, #2
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x44>)
 8000556:	f000 fdd8 	bl	800110a <HAL_CAN_ActivateNotification>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <main+0x34>
  {
    Error_Handler();
 8000560:	f000 f84f 	bl	8000602 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000564:	f002 f8b0 	bl	80026c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000568:	f7ff ff08 	bl	800037c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800056c:	f002 f8de 	bl	800272c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x40>
 8000572:	bf00      	nop
 8000574:	20000080 	.word	0x20000080

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b090      	sub	sp, #64	; 0x40
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2228      	movs	r2, #40	; 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fdaa 	bl	80050e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 faaf 	bl	8001b24 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005cc:	f000 f819 	bl	8000602 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fd1c 	bl	8002028 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005f6:	f000 f804 	bl	8000602 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3740      	adds	r7, #64	; 0x40
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000606:	b672      	cpsid	i
}
 8000608:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <Error_Handler+0x8>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_MspInit+0x68>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <HAL_MspInit+0x68>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x68>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x68>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <HAL_MspInit+0x68>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x68>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	210f      	movs	r1, #15
 8000646:	f06f 0001 	mvn.w	r0, #1
 800064a:	f001 f87e 	bl	800174a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x6c>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x6c>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <MemManage_Handler+0x4>

0800068e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <UsageFault_Handler+0x4>

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f8fb 	bl	80008a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006ae:	f003 fd27 	bl	8004100 <xTaskGetSchedulerState>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d001      	beq.n	80006bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006b8:	f004 fa86 	bl	8004bc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006c6:	f000 fd45 	bl	8001154 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000080 	.word	0x20000080

080006d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART1_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART1_UART_Init+0x4c>)
 8000718:	f001 fe1e 	bl	8002358 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f7ff ff6e 	bl	8000602 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b4 	.word	0x200000b4
 8000730:	40013800 	.word	0x40013800

08000734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <HAL_UART_MspInit+0x8c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d131      	bne.n	80007b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_UART_MspInit+0x90>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UART_MspInit+0x90>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_UART_MspInit+0x94>)
 800079a:	f001 f80d 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_UART_MspInit+0x94>)
 80007b4:	f001 f800 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010800 	.word	0x40010800

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f2:	f7ff ff6f 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f6:	f004 fc41 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fe99 	bl	8000530 <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000808:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 800080c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000810:	20001a44 	.word	0x20001a44

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 ff83 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff feea 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff9b 	bl	800179e <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 ff63 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000008 	.word	0x20000008
 800089c:	20000010 	.word	0x20000010
 80008a0:	2000000c 	.word	0x2000000c

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a03      	ldr	r2, [pc, #12]	; (80008c4 <HAL_IncTick+0x20>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000010 	.word	0x20000010
 80008c4:	200000f8 	.word	0x200000f8

080008c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	200000f8 	.word	0x200000f8

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fff0 	bl	80008c8 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_Delay+0x44>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000902:	bf00      	nop
 8000904:	f7ff ffe0 	bl	80008c8 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000010 	.word	0x20000010

08000924 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e0ed      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fcc6 	bl	80002d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0201 	orr.w	r2, r2, #1
 8000956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000958:	f7ff ffb6 	bl	80008c8 <HAL_GetTick>
 800095c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800095e:	e012      	b.n	8000986 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000960:	f7ff ffb2 	bl	80008c8 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d90b      	bls.n	8000986 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0c5      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0e5      	beq.n	8000960 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f022 0202 	bic.w	r2, r2, #2
 80009a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a4:	f7ff ff90 	bl	80008c8 <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009aa:	e012      	b.n	80009d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009ac:	f7ff ff8c 	bl	80008c8 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d90b      	bls.n	80009d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2205      	movs	r2, #5
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e09f      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1e5      	bne.n	80009ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7e1b      	ldrb	r3, [r3, #24]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d108      	bne.n	80009fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7e5b      	ldrb	r3, [r3, #25]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d108      	bne.n	8000a24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7e9b      	ldrb	r3, [r3, #26]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d108      	bne.n	8000a4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0220 	orr.w	r2, r2, #32
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0220 	bic.w	r2, r2, #32
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7edb      	ldrb	r3, [r3, #27]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0210 	bic.w	r2, r2, #16
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0210 	orr.w	r2, r2, #16
 8000a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7f1b      	ldrb	r3, [r3, #28]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0208 	bic.w	r2, r2, #8
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7f5b      	ldrb	r3, [r3, #29]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0204 	orr.w	r2, r2, #4
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e007      	b.n	8000adc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0204 	bic.w	r2, r2, #4
 8000ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	ea42 0103 	orr.w	r1, r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b087      	sub	sp, #28
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d003      	beq.n	8000b40 <HAL_CAN_ConfigFilter+0x26>
 8000b38:	7cfb      	ldrb	r3, [r7, #19]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	f040 80aa 	bne.w	8000c94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	2201      	movs	r2, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d123      	bne.n	8000bc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	401a      	ands	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3248      	adds	r2, #72	; 0x48
 8000ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb8:	6979      	ldr	r1, [r7, #20]
 8000bba:	3348      	adds	r3, #72	; 0x48
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d122      	bne.n	8000c10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3248      	adds	r2, #72	; 0x48
 8000bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c06:	6979      	ldr	r1, [r7, #20]
 8000c08:	3348      	adds	r3, #72	; 0x48
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c56:	e007      	b.n	8000c68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c86:	f023 0201 	bic.w	r2, r3, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	e006      	b.n	8000ca2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
  }
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d12e      	bne.n	8000d1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cd8:	f7ff fdf6 	bl	80008c8 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff fdf2 	bl	80008c8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e012      	b.n	8000d2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e5      	bne.n	8000ce0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e006      	b.n	8000d2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
  }
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d52:	7ffb      	ldrb	r3, [r7, #31]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d003      	beq.n	8000d60 <HAL_CAN_AddTxMessage+0x2c>
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	f040 80b8 	bne.w	8000ed0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80a0 	beq.w	8000ec0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	0e1b      	lsrs	r3, r3, #24
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d907      	bls.n	8000da0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e09e      	b.n	8000ede <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000da0:	2201      	movs	r2, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	409a      	lsls	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10d      	bne.n	8000dce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dbc:	68f9      	ldr	r1, [r7, #12]
 8000dbe:	6809      	ldr	r1, [r1, #0]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3318      	adds	r3, #24
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	440b      	add	r3, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e00f      	b.n	8000dee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dde:	68f9      	ldr	r1, [r7, #12]
 8000de0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000de2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3318      	adds	r3, #24
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	440b      	add	r3, r1
 8000dec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3304      	adds	r3, #4
 8000e00:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	7d1b      	ldrb	r3, [r3, #20]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d111      	bne.n	8000e2e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3318      	adds	r3, #24
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	4413      	add	r3, r2
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6811      	ldr	r1, [r2, #0]
 8000e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3318      	adds	r3, #24
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	440b      	add	r3, r1
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3307      	adds	r3, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	061a      	lsls	r2, r3, #24
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3306      	adds	r3, #6
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3305      	adds	r3, #5
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3204      	adds	r2, #4
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	4610      	mov	r0, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	6811      	ldr	r1, [r2, #0]
 8000e56:	ea43 0200 	orr.w	r2, r3, r0
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	440b      	add	r3, r1
 8000e60:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3303      	adds	r3, #3
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	061a      	lsls	r2, r3, #24
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3302      	adds	r3, #2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4313      	orrs	r3, r2
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4610      	mov	r0, r2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	6811      	ldr	r1, [r2, #0]
 8000e8c:	ea43 0200 	orr.w	r2, r3, r0
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	440b      	add	r3, r1
 8000e96:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3318      	adds	r3, #24
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	440b      	add	r3, r1
 8000eba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e00e      	b.n	8000ede <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e006      	b.n	8000ede <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d003      	beq.n	8000f0c <HAL_CAN_GetRxMessage+0x24>
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	f040 80f3 	bne.w	80010f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10e      	bne.n	8000f30 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d116      	bne.n	8000f4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e0e7      	b.n	8001100 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d107      	bne.n	8000f4e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0d8      	b.n	8001100 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	331b      	adds	r3, #27
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0204 	and.w	r2, r3, #4
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10c      	bne.n	8000f86 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	331b      	adds	r3, #27
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0d5b      	lsrs	r3, r3, #21
 8000f7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e00b      	b.n	8000f9e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	331b      	adds	r3, #27
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	331b      	adds	r3, #27
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0202 	and.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	331b      	adds	r3, #27
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 020f 	and.w	r2, r3, #15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	331b      	adds	r3, #27
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3304      	adds	r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	331b      	adds	r3, #27
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	0a1a      	lsrs	r2, r3, #8
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0c1a      	lsrs	r2, r3, #16
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3302      	adds	r3, #2
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0e1a      	lsrs	r2, r3, #24
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3303      	adds	r3, #3
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3304      	adds	r3, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0a1a      	lsrs	r2, r3, #8
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3305      	adds	r3, #5
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0c1a      	lsrs	r2, r3, #16
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3306      	adds	r3, #6
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e1a      	lsrs	r2, r3, #24
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3307      	adds	r3, #7
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d108      	bne.n	80010de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	e007      	b.n	80010ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0220 	orr.w	r2, r2, #32
 80010ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e006      	b.n	8001100 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
  }
}
 8001100:	4618      	mov	r0, r3
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d002      	beq.n	8001128 <HAL_CAN_ActivateNotification+0x1e>
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d109      	bne.n	800113c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6959      	ldr	r1, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e006      	b.n	800114a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
  }
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d07c      	beq.n	8001294 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d023      	beq.n	80011ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f983 	bl	80014c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80011bc:	e016      	b.n	80011ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	e00c      	b.n	80011ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	e002      	b.n	80011ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f986 	bl	80014f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d024      	beq.n	8001240 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f962 	bl	80014d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001210:	e016      	b.n	8001240 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
 8001224:	e00c      	b.n	8001240 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	e002      	b.n	8001240 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f965 	bl	800150a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d024      	beq.n	8001294 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001252:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f941 	bl	80014e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001264:	e016      	b.n	8001294 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	e00c      	b.n	8001294 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	e002      	b.n	8001294 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f944 	bl	800151c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2210      	movs	r2, #16
 80012b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2208      	movs	r2, #8
 80012d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f92a 	bl	800152e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff94 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00c      	beq.n	800131c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2210      	movs	r2, #16
 800131a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f90a 	bl	8001552 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f8f2 	bl	8001540 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2210      	movs	r2, #16
 8001376:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f8f3 	bl	8001564 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2208      	movs	r2, #8
 8001398:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f8eb 	bl	8001576 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d07b      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d072      	beq.n	800149a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d008      	beq.n	80013ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d008      	beq.n	8001408 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140e:	2b00      	cmp	r3, #0
 8001410:	d043      	beq.n	800149a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001418:	2b00      	cmp	r3, #0
 800141a:	d03e      	beq.n	800149a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001422:	2b60      	cmp	r3, #96	; 0x60
 8001424:	d02b      	beq.n	800147e <HAL_CAN_IRQHandler+0x32a>
 8001426:	2b60      	cmp	r3, #96	; 0x60
 8001428:	d82e      	bhi.n	8001488 <HAL_CAN_IRQHandler+0x334>
 800142a:	2b50      	cmp	r3, #80	; 0x50
 800142c:	d022      	beq.n	8001474 <HAL_CAN_IRQHandler+0x320>
 800142e:	2b50      	cmp	r3, #80	; 0x50
 8001430:	d82a      	bhi.n	8001488 <HAL_CAN_IRQHandler+0x334>
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d019      	beq.n	800146a <HAL_CAN_IRQHandler+0x316>
 8001436:	2b40      	cmp	r3, #64	; 0x40
 8001438:	d826      	bhi.n	8001488 <HAL_CAN_IRQHandler+0x334>
 800143a:	2b30      	cmp	r3, #48	; 0x30
 800143c:	d010      	beq.n	8001460 <HAL_CAN_IRQHandler+0x30c>
 800143e:	2b30      	cmp	r3, #48	; 0x30
 8001440:	d822      	bhi.n	8001488 <HAL_CAN_IRQHandler+0x334>
 8001442:	2b10      	cmp	r3, #16
 8001444:	d002      	beq.n	800144c <HAL_CAN_IRQHandler+0x2f8>
 8001446:	2b20      	cmp	r3, #32
 8001448:	d005      	beq.n	8001456 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800144a:	e01d      	b.n	8001488 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001454:	e019      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800145e:	e014      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001468:	e00f      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001472:	e00a      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147c:	e005      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001486:	e000      	b.n	800148a <HAL_CAN_IRQHandler+0x336>
            break;
 8001488:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001498:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2204      	movs	r2, #4
 80014a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f867 	bl	8001588 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
	...

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	; (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e169      	b.n	8001aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017cc:	2201      	movs	r2, #1
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8158 	bne.w	8001a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a9a      	ldr	r2, [pc, #616]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d05e      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 80017f4:	4a98      	ldr	r2, [pc, #608]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d875      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 80017fa:	4a98      	ldr	r2, [pc, #608]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d058      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001800:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d86f      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001806:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x2a8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d052      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 800180c:	4a94      	ldr	r2, [pc, #592]	; (8001a60 <HAL_GPIO_Init+0x2a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d869      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001812:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04c      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001818:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d863      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800181e:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d046      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001824:	4a90      	ldr	r2, [pc, #576]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d85d      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d82a      	bhi.n	8001884 <HAL_GPIO_Init+0xcc>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d859      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <HAL_GPIO_Init+0x80>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	080018b3 	.word	0x080018b3
 800183c:	0800188d 	.word	0x0800188d
 8001840:	0800189f 	.word	0x0800189f
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e7 	.word	0x080018e7
 800184c:	080018e7 	.word	0x080018e7
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018e7 	.word	0x080018e7
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e7 	.word	0x080018e7
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018e7 	.word	0x080018e7
 8001868:	080018e7 	.word	0x080018e7
 800186c:	080018e7 	.word	0x080018e7
 8001870:	080018e7 	.word	0x080018e7
 8001874:	080018e7 	.word	0x080018e7
 8001878:	080018e7 	.word	0x080018e7
 800187c:	08001895 	.word	0x08001895
 8001880:	080018a9 	.word	0x080018a9
 8001884:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <HAL_GPIO_Init+0x2b4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e029      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e024      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01f      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e01a      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e013      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e009      	b.n	80018e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          break;
 80018e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d801      	bhi.n	80018f2 <HAL_GPIO_Init+0x13a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_Init+0x13e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d802      	bhi.n	8001904 <HAL_GPIO_Init+0x14c>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x152>
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3b08      	subs	r3, #8
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	210f      	movs	r1, #15
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80b1 	beq.w	8001a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001950:	4a48      	ldr	r2, [pc, #288]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1ec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3f      	ldr	r2, [pc, #252]	; (8001a7c <HAL_GPIO_Init+0x2c4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3e      	ldr	r2, [pc, #248]	; (8001a80 <HAL_GPIO_Init+0x2c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_GPIO_Init+0x2cc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1e0>
 8001994:	2303      	movs	r3, #3
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 8001998:	2304      	movs	r3, #4
 800199a:	e004      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 800199c:	2302      	movs	r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_GPIO_Init+0x1ee>
 80019a4:	2300      	movs	r3, #0
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	f002 0203 	and.w	r2, r2, #3
 80019ac:	0092      	lsls	r2, r2, #2
 80019ae:	4093      	lsls	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b6:	492f      	ldr	r1, [pc, #188]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	492c      	ldr	r1, [pc, #176]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4928      	ldr	r1, [pc, #160]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4922      	ldr	r1, [pc, #136]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	491e      	ldr	r1, [pc, #120]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4918      	ldr	r1, [pc, #96]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4914      	ldr	r1, [pc, #80]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d021      	beq.n	8001a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e021      	b.n	8001a9a <HAL_GPIO_Init+0x2e2>
 8001a56:	bf00      	nop
 8001a58:	10320000 	.word	0x10320000
 8001a5c:	10310000 	.word	0x10310000
 8001a60:	10220000 	.word	0x10220000
 8001a64:	10210000 	.word	0x10210000
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	10110000 	.word	0x10110000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40011400 	.word	0x40011400
 8001a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4909      	ldr	r1, [pc, #36]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae8e 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	372c      	adds	r7, #44	; 0x2c
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43d9      	mvns	r1, r3
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	400b      	ands	r3, r1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	611a      	str	r2, [r3, #16]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e272      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8087 	beq.w	8001c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d00c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b50:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d112      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x12c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d168      	bne.n	8001c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e24c      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x76>
 8001b8c:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7a      	ldr	r2, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a77      	ldr	r2, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0xbc>
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fe62 	bl	80008c8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe fe5e 	bl	80008c8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e200      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe4>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7fe fe4e 	bl	80008c8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7fe fe4a 	bl	80008c8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1ec      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x10c>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c0      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4939      	ldr	r1, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fe03 	bl	80008c8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7fe fdff 	bl	80008c8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a1      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4927      	ldr	r1, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fde2 	bl	80008c8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7fe fdde 	bl	80008c8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e180      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d019      	beq.n	8001d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe fdc2 	bl	80008c8 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7fe fdbe 	bl	80008c8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e160      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fad8 	bl	800231c <RCC_Delay>
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7fe fda8 	bl	80008c8 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00f      	b.n	8001d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fda4 	bl	80008c8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e146      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	42420000 	.word	0x42420000
 8001d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e9      	bne.n	8001d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a6 	beq.w	8001f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a87      	ldr	r2, [pc, #540]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b85      	ldr	r3, [pc, #532]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fd65 	bl	80008c8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7fe fd61 	bl	80008c8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e103      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b75      	ldr	r3, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x312>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x356>
 8001e60:	4b61      	ldr	r3, [pc, #388]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a60      	ldr	r2, [pc, #384]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b58      	ldr	r3, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fd15 	bl	80008c8 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fd11 	bl	80008c8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0b1      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x37e>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fcff 	bl	80008c8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fcfb 	bl	80008c8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e09b      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d061      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d146      	bne.n	8001fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fccf 	bl	80008c8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fccb 	bl	80008c8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e06d      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a19      	ldr	r1, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fc9f 	bl	80008c8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe fc9b 	bl	80008c8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e03d      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46a>
 8001fac:	e035      	b.n	800201a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fc88 	bl	80008c8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe fc84 	bl	80008c8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e026      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x498>
 8001fda:	e01e      	b.n	800201a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e019      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x500>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0d0      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4965      	ldr	r1, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d040      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e073      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4936      	ldr	r1, [pc, #216]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fbd6 	bl	80008c8 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fbd2 	bl	80008c8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e053      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d210      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4922      	ldr	r1, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f821 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1cc>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1d0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fb34 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	080051c0 	.word	0x080051c0
 80021f4:	20000008 	.word	0x20000008
 80021f8:	2000000c 	.word	0x2000000c

080021fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b490      	push	{r4, r7}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002204:	1d3c      	adds	r4, r7, #4
 8002206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800220c:	f240 2301 	movw	r3, #513	; 0x201
 8002210:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x40>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x46>
 800223a:	e02b      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800223e:	623b      	str	r3, [r7, #32]
      break;
 8002240:	e02b      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3328      	adds	r3, #40	; 0x28
 800224c:	443b      	add	r3, r7
 800224e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002252:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d012      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0c5b      	lsrs	r3, r3, #17
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	3328      	adds	r3, #40	; 0x28
 800226a:	443b      	add	r3, r7
 800226c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002270:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e004      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	623b      	str	r3, [r7, #32]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002296:	623b      	str	r3, [r7, #32]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	6a3b      	ldr	r3, [r7, #32]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc90      	pop	{r4, r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	0800512c 	.word	0x0800512c
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	003d0900 	.word	0x003d0900

080022b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000008 	.word	0x20000008

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d0:	f7ff fff2 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080051d0 	.word	0x080051d0

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	080051d0 	.word	0x080051d0

0800231c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCC_Delay+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <RCC_Delay+0x38>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002338:	bf00      	nop
  }
  while (Delay --);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <RCC_Delay+0x1c>
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000008 	.word	0x20000008
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e03f      	b.n	80023ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe f9d8 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f905 	bl	80025ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08a      	sub	sp, #40	; 0x28
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	d17c      	bne.n	800250c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_UART_Transmit+0x2c>
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e075      	b.n	800250e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_UART_Transmit+0x3e>
 800242c:	2302      	movs	r3, #2
 800242e:	e06e      	b.n	800250e <HAL_UART_Transmit+0x11c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	; 0x21
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002446:	f7fe fa3f 	bl	80008c8 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002460:	d108      	bne.n	8002474 <HAL_UART_Transmit+0x82>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	e003      	b.n	800247c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002484:	e02a      	b.n	80024dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f840 	bl	8002516 <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e036      	b.n	800250e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3302      	adds	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e007      	b.n	80024ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1cf      	bne.n	8002486 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2140      	movs	r1, #64	; 0x40
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f810 	bl	8002516 <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e006      	b.n	800250e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	e02c      	b.n	8002582 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d028      	beq.n	8002582 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x30>
 8002536:	f7fe f9c7 	bl	80008c8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	429a      	cmp	r2, r3
 8002544:	d21d      	bcs.n	8002582 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002554:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e00f      	b.n	80025a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	429a      	cmp	r2, r3
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	429a      	cmp	r2, r3
 800259e:	d0c3      	beq.n	8002528 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025e6:	f023 030c 	bic.w	r3, r3, #12
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2c      	ldr	r2, [pc, #176]	; (80026c0 <UART_SetConfig+0x114>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d103      	bne.n	800261c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002614:	f7ff fe6e 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	e002      	b.n	8002622 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800261c:	f7ff fe56 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8002620:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <UART_SetConfig+0x118>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	0119      	lsls	r1, r3, #4
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <UART_SetConfig+0x118>)
 800265a:	fba3 0302 	umull	r0, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <UART_SetConfig+0x118>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002678:	4419      	add	r1, r3
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <UART_SetConfig+0x118>)
 8002692:	fba3 0302 	umull	r0, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2064      	movs	r0, #100	; 0x64
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <UART_SetConfig+0x118>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	440a      	add	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40013800 	.word	0x40013800
 80026c4:	51eb851f 	.word	0x51eb851f

080026c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ce:	f3ef 8305 	mrs	r3, IPSR
 80026d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80026d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026da:	f3ef 8310 	mrs	r3, PRIMASK
 80026de:	607b      	str	r3, [r7, #4]
  return(result);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <osKernelInitialize+0x32>
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <osKernelInitialize+0x60>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d109      	bne.n	8002702 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026ee:	f3ef 8311 	mrs	r3, BASEPRI
 80026f2:	603b      	str	r3, [r7, #0]
  return(result);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80026fa:	f06f 0305 	mvn.w	r3, #5
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e00c      	b.n	800271c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <osKernelInitialize+0x60>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <osKernelInitialize+0x60>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e002      	b.n	800271c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	200000fc 	.word	0x200000fc

0800272c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002732:	f3ef 8305 	mrs	r3, IPSR
 8002736:	60bb      	str	r3, [r7, #8]
  return(result);
 8002738:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273e:	f3ef 8310 	mrs	r3, PRIMASK
 8002742:	607b      	str	r3, [r7, #4]
  return(result);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <osKernelStart+0x32>
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <osKernelStart+0x64>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d109      	bne.n	8002766 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002752:	f3ef 8311 	mrs	r3, BASEPRI
 8002756:	603b      	str	r3, [r7, #0]
  return(result);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <osKernelStart+0x3a>
    stat = osErrorISR;
 800275e:	f06f 0305 	mvn.w	r3, #5
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e00e      	b.n	8002784 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <osKernelStart+0x64>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <osKernelStart+0x64>)
 8002770:	2202      	movs	r2, #2
 8002772:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002774:	f001 f878 	bl	8003868 <vTaskStartScheduler>
      stat = osOK;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e002      	b.n	8002784 <osKernelStart+0x58>
    } else {
      stat = osError;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200000fc 	.word	0x200000fc

08002794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	; 0x48
 8002798:	af04      	add	r7, sp, #16
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a4:	f3ef 8305 	mrs	r3, IPSR
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 8094 	bne.w	80028da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	623b      	str	r3, [r7, #32]
  return(result);
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 808d 	bne.w	80028da <osThreadNew+0x146>
 80027c0:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <osThreadNew+0x150>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d106      	bne.n	80027d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027c8:	f3ef 8311 	mrs	r3, BASEPRI
 80027cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 8082 	bne.w	80028da <osThreadNew+0x146>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d07e      	beq.n	80028da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80027e0:	2318      	movs	r3, #24
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80027e4:	2300      	movs	r3, #0
 80027e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80027e8:	f107 031b 	add.w	r3, r7, #27
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d045      	beq.n	8002886 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <osThreadNew+0x74>
        name = attr->name;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <osThreadNew+0x9a>
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	2b38      	cmp	r3, #56	; 0x38
 8002820:	d805      	bhi.n	800282e <osThreadNew+0x9a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <osThreadNew+0x9e>
        return (NULL);
 800282e:	2300      	movs	r3, #0
 8002830:	e054      	b.n	80028dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <osThreadNew+0xd4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b5b      	cmp	r3, #91	; 0x5b
 8002850:	d90a      	bls.n	8002868 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <osThreadNew+0xd4>
        mem = 1;
 8002862:	2301      	movs	r3, #1
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
 8002866:	e010      	b.n	800288a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10c      	bne.n	800288a <osThreadNew+0xf6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <osThreadNew+0xf6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <osThreadNew+0xf6>
          mem = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
 8002884:	e001      	b.n	800288a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	2b01      	cmp	r3, #1
 800288e:	d110      	bne.n	80028b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002898:	9202      	str	r2, [sp, #8]
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fe12 	bl	80034d0 <xTaskCreateStatic>
 80028ac:	4603      	mov	r3, r0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e013      	b.n	80028da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d110      	bne.n	80028da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fe5c 	bl	8003588 <xTaskCreate>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <osThreadNew+0x146>
          hTask = NULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028da:	697b      	ldr	r3, [r7, #20]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3738      	adds	r7, #56	; 0x38
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200000fc 	.word	0x200000fc

080028e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f0:	f3ef 8305 	mrs	r3, IPSR
 80028f4:	613b      	str	r3, [r7, #16]
  return(result);
 80028f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002900:	60fb      	str	r3, [r7, #12]
  return(result);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <osDelay+0x34>
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <osDelay+0x58>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d109      	bne.n	8002924 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002910:	f3ef 8311 	mrs	r3, BASEPRI
 8002914:	60bb      	str	r3, [r7, #8]
  return(result);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <osDelay+0x3c>
    stat = osErrorISR;
 800291c:	f06f 0305 	mvn.w	r3, #5
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e007      	b.n	8002934 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <osDelay+0x4c>
      vTaskDelay(ticks);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 ff66 	bl	8003800 <vTaskDelay>
    }
  }

  return (stat);
 8002934:	697b      	ldr	r3, [r7, #20]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200000fc 	.word	0x200000fc

08002944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a06      	ldr	r2, [pc, #24]	; (800296c <vApplicationGetIdleTaskMemory+0x28>)
 8002954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <vApplicationGetIdleTaskMemory+0x2c>)
 800295a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20000100 	.word	0x20000100
 8002970:	2000015c 	.word	0x2000015c

08002974 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <vApplicationGetTimerTaskMemory+0x30>)
 800298a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002992:	601a      	str	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	2000035c 	.word	0x2000035c
 80029a4:	200003b8 	.word	0x200003b8

080029a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0208 	add.w	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f103 0208 	add.w	r2, r3, #8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f103 0208 	add.w	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d103      	bne.n	8002a64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e00c      	b.n	8002a7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3308      	adds	r3, #8
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e002      	b.n	8002a72 <vListInsert+0x2e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d2f6      	bcs.n	8002a6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6852      	ldr	r2, [r2, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
	...

08002b08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b32:	f001 ffcb 	bl	8004acc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	3b01      	subs	r3, #1
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d114      	bne.n	8002bb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01a      	beq.n	8002bc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3310      	adds	r3, #16
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f8f1 	bl	8003d7c <xTaskRemoveFromEventList>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <xQueueGenericReset+0xcc>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	e009      	b.n	8002bc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fef6 	bl	80029a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fef1 	bl	80029a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bc6:	f001 ffb1 	bl	8004b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c1a:	bf00      	nop
 8002c1c:	e7fe      	b.n	8002c1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <xQueueGenericCreateStatic+0x52>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <xQueueGenericCreateStatic+0x56>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <xQueueGenericCreateStatic+0x58>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	623b      	str	r3, [r7, #32]
}
 8002c46:	bf00      	nop
 8002c48:	e7fe      	b.n	8002c48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <xQueueGenericCreateStatic+0x7e>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <xQueueGenericCreateStatic+0x82>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueGenericCreateStatic+0x84>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61fb      	str	r3, [r7, #28]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c76:	2350      	movs	r3, #80	; 0x50
 8002c78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b50      	cmp	r3, #80	; 0x50
 8002c7e:	d00a      	beq.n	8002c96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61bb      	str	r3, [r7, #24]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ca8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f805 	bl	8002cc6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3730      	adds	r7, #48	; 0x30
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e002      	b.n	8002ce8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	69b8      	ldr	r0, [r7, #24]
 8002cf8:	f7ff ff06 	bl	8002b08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGenericSend+0x32>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <xQueueGenericSend+0x40>
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <xQueueGenericSend+0x44>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <xQueueGenericSend+0x46>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xQueueGenericSend+0x60>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x6e>
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <xQueueGenericSend+0x72>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSend+0x74>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	623b      	str	r3, [r7, #32]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d9a:	f001 f9b1 	bl	8004100 <xTaskGetSchedulerState>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <xQueueGenericSend+0x9e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0xa2>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0xa4>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericSend+0xbe>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	61fb      	str	r3, [r7, #28]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dca:	f001 fe7f 	bl	8004acc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <xQueueGenericSend+0xd4>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d129      	bne.n	8002e34 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de6:	f000 fa07 	bl	80031f8 <prvCopyDataToQueue>
 8002dea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 ffbf 	bl	8003d7c <xTaskRemoveFromEventList>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <xQueueGenericSend+0x1f8>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	e00a      	b.n	8002e2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <xQueueGenericSend+0x1f8>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e2c:	f001 fe7e 	bl	8004b2c <vPortExitCritical>
				return pdPASS;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e063      	b.n	8002efc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e3a:	f001 fe77 	bl	8004b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e05c      	b.n	8002efc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fff9 	bl	8003e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e56:	f001 fe69 	bl	8004b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e5a:	f000 fd6b 	bl	8003934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e5e:	f001 fe35 	bl	8004acc <vPortEnterCritical>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <xQueueGenericSend+0x16c>
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x182>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e8e:	f001 fe4d 	bl	8004b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e92:	1d3a      	adds	r2, r7, #4
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 ffe8 	bl	8003e70 <xTaskCheckForTimeOut>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d124      	bne.n	8002ef0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea8:	f000 fa9e 	bl	80033e8 <prvIsQueueFull>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	3310      	adds	r3, #16
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff0e 	bl	8003cdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec2:	f000 fa29 	bl	8003318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ec6:	f000 fd43 	bl	8003950 <xTaskResumeAll>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f af7c 	bne.w	8002dca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <xQueueGenericSend+0x1f8>)
 8002ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	e772      	b.n	8002dca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee6:	f000 fa17 	bl	8003318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eea:	f000 fd31 	bl	8003950 <xTaskResumeAll>
 8002eee:	e76c      	b.n	8002dca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 fa11 	bl	8003318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ef6:	f000 fd2b 	bl	8003950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002efa:	2300      	movs	r3, #0
		}
	}
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3738      	adds	r7, #56	; 0x38
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	; 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <xQueueGenericSendFromISR+0x3c>
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <xQueueGenericSendFromISR+0x40>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <xQueueGenericSendFromISR+0x42>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	623b      	str	r3, [r7, #32]
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSendFromISR+0x6a>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <xQueueGenericSendFromISR+0x6e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericSendFromISR+0x70>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f92:	f001 fe5d 	bl	8004c50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f96:	f3ef 8211 	mrs	r2, BASEPRI
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <xQueueGenericSendFromISR+0xbc>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d12c      	bne.n	800301e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd4:	f000 f910 	bl	80031f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d112      	bne.n	8003008 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	3324      	adds	r3, #36	; 0x24
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fec4 	bl	8003d7c <xTaskRemoveFromEventList>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800300c:	3301      	adds	r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	b25a      	sxtb	r2, r3
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003018:	2301      	movs	r3, #1
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800301c:	e001      	b.n	8003022 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800302c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003030:	4618      	mov	r0, r3
 8003032:	3738      	adds	r7, #56	; 0x38
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08c      	sub	sp, #48	; 0x30
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <xQueueReceive+0x30>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	623b      	str	r3, [r7, #32]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <xQueueReceive+0x3e>
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueReceive+0x42>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueReceive+0x44>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueReceive+0x5e>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61fb      	str	r3, [r7, #28]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003096:	f001 f833 	bl	8004100 <xTaskGetSchedulerState>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <xQueueReceive+0x6e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <xQueueReceive+0x72>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueReceive+0x74>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xQueueReceive+0x8e>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61bb      	str	r3, [r7, #24]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030c6:	f001 fd01 	bl	8004acc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01f      	beq.n	8003116 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030da:	f000 f8f7 	bl	80032cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00f      	beq.n	800310e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	3310      	adds	r3, #16
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fe42 	bl	8003d7c <xTaskRemoveFromEventList>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030fe:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <xQueueReceive+0x1bc>)
 8003100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800310e:	f001 fd0d 	bl	8004b2c <vPortExitCritical>
				return pdPASS;
 8003112:	2301      	movs	r3, #1
 8003114:	e069      	b.n	80031ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800311c:	f001 fd06 	bl	8004b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003120:	2300      	movs	r3, #0
 8003122:	e062      	b.n	80031ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fe88 	bl	8003e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003138:	f001 fcf8 	bl	8004b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800313c:	f000 fbfa 	bl	8003934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003140:	f001 fcc4 	bl	8004acc <vPortEnterCritical>
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800314a:	b25b      	sxtb	r3, r3
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d103      	bne.n	800315a <xQueueReceive+0x122>
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003160:	b25b      	sxtb	r3, r3
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d103      	bne.n	8003170 <xQueueReceive+0x138>
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003170:	f001 fcdc 	bl	8004b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003174:	1d3a      	adds	r2, r7, #4
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fe77 	bl	8003e70 <xTaskCheckForTimeOut>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d123      	bne.n	80031d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800318a:	f000 f917 	bl	80033bc <prvIsQueueEmpty>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	3324      	adds	r3, #36	; 0x24
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fd9d 	bl	8003cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a4:	f000 f8b8 	bl	8003318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031a8:	f000 fbd2 	bl	8003950 <xTaskResumeAll>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d189      	bne.n	80030c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <xQueueReceive+0x1bc>)
 80031b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	e780      	b.n	80030c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c6:	f000 f8a7 	bl	8003318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ca:	f000 fbc1 	bl	8003950 <xTaskResumeAll>
 80031ce:	e77a      	b.n	80030c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d2:	f000 f8a1 	bl	8003318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d6:	f000 fbbb 	bl	8003950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031dc:	f000 f8ee 	bl	80033bc <prvIsQueueEmpty>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f43f af6f 	beq.w	80030c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10d      	bne.n	8003232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d14d      	bne.n	80032ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 ff8a 	bl	800413c <xTaskPriorityDisinherit>
 8003228:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	e043      	b.n	80032ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d119      	bne.n	800326c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6898      	ldr	r0, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	461a      	mov	r2, r3
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	f001 ff3e 	bl	80050c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d32b      	bcc.n	80032ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e026      	b.n	80032ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68d8      	ldr	r0, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	461a      	mov	r2, r3
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	f001 ff24 	bl	80050c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	425b      	negs	r3, r3
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d207      	bcs.n	80032a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	425b      	negs	r3, r3
 80032a2:	441a      	add	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d105      	bne.n	80032ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032c2:	697b      	ldr	r3, [r7, #20]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d018      	beq.n	8003310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	441a      	add	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d303      	bcc.n	8003300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	461a      	mov	r2, r3
 800330a:	6838      	ldr	r0, [r7, #0]
 800330c:	f001 feda 	bl	80050c4 <memcpy>
	}
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003320:	f001 fbd4 	bl	8004acc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800332c:	e011      	b.n	8003352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3324      	adds	r3, #36	; 0x24
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fd1e 	bl	8003d7c <xTaskRemoveFromEventList>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003346:	f000 fdf5 	bl	8003f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3b01      	subs	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	dce9      	bgt.n	800332e <prvUnlockQueue+0x16>
 800335a:	e000      	b.n	800335e <prvUnlockQueue+0x46>
					break;
 800335c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003366:	f001 fbe1 	bl	8004b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800336a:	f001 fbaf 	bl	8004acc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003376:	e011      	b.n	800339c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3310      	adds	r3, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fcf9 	bl	8003d7c <xTaskRemoveFromEventList>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003390:	f000 fdd0 	bl	8003f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003394:	7bbb      	ldrb	r3, [r7, #14]
 8003396:	3b01      	subs	r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800339c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dce9      	bgt.n	8003378 <prvUnlockQueue+0x60>
 80033a4:	e000      	b.n	80033a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033b0:	f001 fbbc 	bl	8004b2c <vPortExitCritical>
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c4:	f001 fb82 	bl	8004acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033da:	f001 fba7 	bl	8004b2c <vPortExitCritical>

	return xReturn;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f0:	f001 fb6c 	bl	8004acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d102      	bne.n	8003406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e001      	b.n	800340a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800340a:	f001 fb8f 	bl	8004b2c <vPortExitCritical>

	return xReturn;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e014      	b.n	8003452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <vQueueAddToRegistry+0x4c>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003434:	490b      	ldr	r1, [pc, #44]	; (8003464 <vQueueAddToRegistry+0x4c>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <vQueueAddToRegistry+0x4c>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800344a:	e006      	b.n	800345a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b07      	cmp	r3, #7
 8003456:	d9e7      	bls.n	8003428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	200007b8 	.word	0x200007b8

08003468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003478:	f001 fb28 	bl	8004acc <vPortEnterCritical>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <vQueueWaitForMessageRestricted+0x2a>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003498:	b25b      	sxtb	r3, r3
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d103      	bne.n	80034a8 <vQueueWaitForMessageRestricted+0x40>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034a8:	f001 fb40 	bl	8004b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3324      	adds	r3, #36	; 0x24
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc31 	bl	8003d24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff28 	bl	8003318 <prvUnlockQueue>
	}
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af04      	add	r7, sp, #16
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <xTaskCreateStatic+0x46>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	61fb      	str	r3, [r7, #28]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003516:	235c      	movs	r3, #92	; 0x5c
 8003518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b5c      	cmp	r3, #92	; 0x5c
 800351e:	d00a      	beq.n	8003536 <xTaskCreateStatic+0x66>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61bb      	str	r3, [r7, #24]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01e      	beq.n	800357a <xTaskCreateStatic+0xaa>
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800354a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003554:	2300      	movs	r3, #0
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f850 	bl	8003612 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003574:	f000 f8d4 	bl	8003720 <prvAddNewTaskToReadyList>
 8003578:	e001      	b.n	800357e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800357e:	697b      	ldr	r3, [r7, #20]
	}
 8003580:	4618      	mov	r0, r3
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af04      	add	r7, sp, #16
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fb95 	bl	8004ccc <pvPortMalloc>
 80035a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035aa:	205c      	movs	r0, #92	; 0x5c
 80035ac:	f001 fb8e 	bl	8004ccc <pvPortMalloc>
 80035b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
 80035be:	e005      	b.n	80035cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f001 fc47 	bl	8004e54 <vPortFree>
 80035c6:	e001      	b.n	80035cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d017      	beq.n	8003602 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	2300      	movs	r3, #0
 80035de:	9303      	str	r3, [sp, #12]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	9302      	str	r3, [sp, #8]
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f80e 	bl	8003612 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035f6:	69f8      	ldr	r0, [r7, #28]
 80035f8:	f000 f892 	bl	8003720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e002      	b.n	8003608 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003608:	69bb      	ldr	r3, [r7, #24]
	}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	461a      	mov	r2, r3
 800362a:	21a5      	movs	r1, #165	; 0xa5
 800362c:	f001 fd58 	bl	80050e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800363a:	3b01      	subs	r3, #1
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f023 0307 	bic.w	r3, r3, #7
 8003648:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	617b      	str	r3, [r7, #20]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e012      	b.n	8003696 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	7819      	ldrb	r1, [r3, #0]
 8003678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	3334      	adds	r3, #52	; 0x34
 8003680:	460a      	mov	r2, r1
 8003682:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d9e9      	bls.n	8003670 <prvInitialiseNewTask+0x5e>
 800369c:	e000      	b.n	80036a0 <prvInitialiseNewTask+0x8e>
		{
			break;
 800369e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	2b37      	cmp	r3, #55	; 0x37
 80036ac:	d901      	bls.n	80036b2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ae:	2337      	movs	r3, #55	; 0x37
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff f98c 	bl	80029e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	3318      	adds	r3, #24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f987 	bl	80029e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	69b8      	ldr	r0, [r7, #24]
 8003702:	f001 f8ef 	bl	80048e4 <pxPortInitialiseStack>
 8003706:	4602      	mov	r2, r0
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003716:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003728:	f001 f9d0 	bl	8004acc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800372c:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 8003734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <prvAddNewTaskToReadyList+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d110      	bne.n	800376e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800374c:	f000 fc16 	bl	8003f7c <prvInitialiseTaskLists>
 8003750:	e00d      	b.n	800376e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <prvAddNewTaskToReadyList+0xcc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	429a      	cmp	r2, r3
 8003766:	d802      	bhi.n	800376e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 8003776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <prvAddNewTaskToReadyList+0xd0>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <prvAddNewTaskToReadyList+0xd4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d903      	bls.n	8003794 <prvAddNewTaskToReadyList+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <prvAddNewTaskToReadyList+0xd4>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <prvAddNewTaskToReadyList+0xd8>)
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f7ff f927 	bl	80029fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037b0:	f001 f9bc 	bl	8004b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <prvAddNewTaskToReadyList+0xcc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <prvAddNewTaskToReadyList+0xc8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d207      	bcs.n	80037da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <prvAddNewTaskToReadyList+0xdc>)
 80037cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000ccc 	.word	0x20000ccc
 80037e8:	200007f8 	.word	0x200007f8
 80037ec:	20000cd8 	.word	0x20000cd8
 80037f0:	20000ce8 	.word	0x20000ce8
 80037f4:	20000cd4 	.word	0x20000cd4
 80037f8:	200007fc 	.word	0x200007fc
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d017      	beq.n	8003842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <vTaskDelay+0x60>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <vTaskDelay+0x30>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60bb      	str	r3, [r7, #8]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003830:	f000 f880 	bl	8003934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003834:	2100      	movs	r1, #0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fcee 	bl	8004218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800383c:	f000 f888 	bl	8003950 <xTaskResumeAll>
 8003840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <vTaskDelay+0x64>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000cf4 	.word	0x20000cf4
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003876:	463a      	mov	r2, r7
 8003878:	1d39      	adds	r1, r7, #4
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff f860 	bl	8002944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003884:	6839      	ldr	r1, [r7, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	9202      	str	r2, [sp, #8]
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	460a      	mov	r2, r1
 8003896:	4921      	ldr	r1, [pc, #132]	; (800391c <vTaskStartScheduler+0xb4>)
 8003898:	4821      	ldr	r0, [pc, #132]	; (8003920 <vTaskStartScheduler+0xb8>)
 800389a:	f7ff fe19 	bl	80034d0 <xTaskCreateStatic>
 800389e:	4603      	mov	r3, r0
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <vTaskStartScheduler+0xbc>)
 80038a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <vTaskStartScheduler+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038ac:	2301      	movs	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e001      	b.n	80038b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d102      	bne.n	80038c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038bc:	f000 fd00 	bl	80042c0 <xTimerCreateTimerTask>
 80038c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d116      	bne.n	80038f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	613b      	str	r3, [r7, #16]
}
 80038da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <vTaskStartScheduler+0xc0>)
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <vTaskStartScheduler+0xc4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <vTaskStartScheduler+0xc8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038f0:	f001 f87a 	bl	80049e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038f4:	e00e      	b.n	8003914 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d10a      	bne.n	8003914 <vTaskStartScheduler+0xac>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60fb      	str	r3, [r7, #12]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <vTaskStartScheduler+0xaa>
}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	0800513c 	.word	0x0800513c
 8003920:	08003f4d 	.word	0x08003f4d
 8003924:	20000cf0 	.word	0x20000cf0
 8003928:	20000cec 	.word	0x20000cec
 800392c:	20000cd8 	.word	0x20000cd8
 8003930:	20000cd0 	.word	0x20000cd0

08003934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <vTaskSuspendAll+0x18>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <vTaskSuspendAll+0x18>)
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000cf4 	.word	0x20000cf4

08003950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <xTaskResumeAll+0x118>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <xTaskResumeAll+0x2c>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	603b      	str	r3, [r7, #0]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800397c:	f001 f8a6 	bl	8004acc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003980:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <xTaskResumeAll+0x118>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3b01      	subs	r3, #1
 8003986:	4a38      	ldr	r2, [pc, #224]	; (8003a68 <xTaskResumeAll+0x118>)
 8003988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <xTaskResumeAll+0x118>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d162      	bne.n	8003a58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <xTaskResumeAll+0x11c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d05e      	beq.n	8003a58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800399a:	e02f      	b.n	80039fc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800399c:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <xTaskResumeAll+0x120>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3318      	adds	r3, #24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f883 	bl	8002ab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f87e 	bl	8002ab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <xTaskResumeAll+0x124>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d903      	bls.n	80039cc <xTaskResumeAll+0x7c>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <xTaskResumeAll+0x124>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <xTaskResumeAll+0x128>)
 80039da:	441a      	add	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7ff f80b 	bl	80029fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <xTaskResumeAll+0x12c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <xTaskResumeAll+0x130>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <xTaskResumeAll+0x120>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1cb      	bne.n	800399c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a0a:	f000 fb55 	bl	80040b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <xTaskResumeAll+0x134>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a1a:	f000 f845 	bl	8003aa8 <xTaskIncrementTick>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f1      	bne.n	8003a1a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <xTaskResumeAll+0x134>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <xTaskResumeAll+0x130>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <xTaskResumeAll+0x138>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a58:	f001 f868 	bl	8004b2c <vPortExitCritical>

	return xAlreadyYielded;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000cf4 	.word	0x20000cf4
 8003a6c:	20000ccc 	.word	0x20000ccc
 8003a70:	20000c8c 	.word	0x20000c8c
 8003a74:	20000cd4 	.word	0x20000cd4
 8003a78:	200007fc 	.word	0x200007fc
 8003a7c:	200007f8 	.word	0x200007f8
 8003a80:	20000ce0 	.word	0x20000ce0
 8003a84:	20000cdc 	.word	0x20000cdc
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <xTaskGetTickCount+0x18>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a98:	687b      	ldr	r3, [r7, #4]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000cd0 	.word	0x20000cd0

08003aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <xTaskIncrementTick+0x150>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 808e 	bne.w	8003bd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <xTaskIncrementTick+0x154>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ac4:	4a4d      	ldr	r2, [pc, #308]	; (8003bfc <xTaskIncrementTick+0x154>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d120      	bne.n	8003b12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <xTaskIncrementTick+0x158>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	603b      	str	r3, [r7, #0]
}
 8003aec:	bf00      	nop
 8003aee:	e7fe      	b.n	8003aee <xTaskIncrementTick+0x46>
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <xTaskIncrementTick+0x158>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <xTaskIncrementTick+0x15c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <xTaskIncrementTick+0x158>)
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <xTaskIncrementTick+0x15c>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <xTaskIncrementTick+0x160>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <xTaskIncrementTick+0x160>)
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	f000 fad3 	bl	80040b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b12:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <xTaskIncrementTick+0x164>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d34e      	bcc.n	8003bba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <xTaskIncrementTick+0x158>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xTaskIncrementTick+0x82>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xTaskIncrementTick+0x84>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <xTaskIncrementTick+0x164>)
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	601a      	str	r2, [r3, #0]
					break;
 8003b38:	e03f      	b.n	8003bba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <xTaskIncrementTick+0x158>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d203      	bcs.n	8003b5a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b52:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <xTaskIncrementTick+0x164>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6013      	str	r3, [r2, #0]
						break;
 8003b58:	e02f      	b.n	8003bba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe ffa8 	bl	8002ab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ff9f 	bl	8002ab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <xTaskIncrementTick+0x168>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d903      	bls.n	8003b8a <xTaskIncrementTick+0xe2>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <xTaskIncrementTick+0x168>)
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <xTaskIncrementTick+0x16c>)
 8003b98:	441a      	add	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	f7fe ff2c 	bl	80029fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <xTaskIncrementTick+0x170>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3b3      	bcc.n	8003b1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb8:	e7b0      	b.n	8003b1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <xTaskIncrementTick+0x170>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4914      	ldr	r1, [pc, #80]	; (8003c14 <xTaskIncrementTick+0x16c>)
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d907      	bls.n	8003be2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e004      	b.n	8003be2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bd8:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <xTaskIncrementTick+0x174>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <xTaskIncrementTick+0x174>)
 8003be0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <xTaskIncrementTick+0x178>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bee:	697b      	ldr	r3, [r7, #20]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000cf4 	.word	0x20000cf4
 8003bfc:	20000cd0 	.word	0x20000cd0
 8003c00:	20000c84 	.word	0x20000c84
 8003c04:	20000c88 	.word	0x20000c88
 8003c08:	20000ce4 	.word	0x20000ce4
 8003c0c:	20000cec 	.word	0x20000cec
 8003c10:	20000cd4 	.word	0x20000cd4
 8003c14:	200007fc 	.word	0x200007fc
 8003c18:	200007f8 	.word	0x200007f8
 8003c1c:	20000cdc 	.word	0x20000cdc
 8003c20:	20000ce0 	.word	0x20000ce0

08003c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <vTaskSwitchContext+0xa4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <vTaskSwitchContext+0xa8>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c38:	e041      	b.n	8003cbe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <vTaskSwitchContext+0xa8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <vTaskSwitchContext+0xac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e010      	b.n	8003c6a <vTaskSwitchContext+0x46>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	607b      	str	r3, [r7, #4]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <vTaskSwitchContext+0x3e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	491a      	ldr	r1, [pc, #104]	; (8003cd4 <vTaskSwitchContext+0xb0>)
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0e4      	beq.n	8003c48 <vTaskSwitchContext+0x24>
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <vTaskSwitchContext+0xb0>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d104      	bne.n	8003cae <vTaskSwitchContext+0x8a>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <vTaskSwitchContext+0xb4>)
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <vTaskSwitchContext+0xac>)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6013      	str	r3, [r2, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000cf4 	.word	0x20000cf4
 8003ccc:	20000ce0 	.word	0x20000ce0
 8003cd0:	20000cd4 	.word	0x20000cd4
 8003cd4:	200007fc 	.word	0x200007fc
 8003cd8:	200007f8 	.word	0x200007f8

08003cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60fb      	str	r3, [r7, #12]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <vTaskPlaceOnEventList+0x44>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3318      	adds	r3, #24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe fe9a 	bl	8002a44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d10:	2101      	movs	r1, #1
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f000 fa80 	bl	8004218 <prvAddCurrentTaskToDelayedList>
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200007f8 	.word	0x200007f8

08003d24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	617b      	str	r3, [r7, #20]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3318      	adds	r3, #24
 8003d52:	4619      	mov	r1, r3
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7fe fe52 	bl	80029fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	68b8      	ldr	r0, [r7, #8]
 8003d6a:	f000 fa55 	bl	8004218 <prvAddCurrentTaskToDelayedList>
	}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200007f8 	.word	0x200007f8

08003d7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60fb      	str	r3, [r7, #12]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3318      	adds	r3, #24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fe81 	bl	8002ab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <xTaskRemoveFromEventList+0xb0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11d      	bne.n	8003df6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fe78 	bl	8002ab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <xTaskRemoveFromEventList+0xb4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d903      	bls.n	8003dd8 <xTaskRemoveFromEventList+0x5c>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <xTaskRemoveFromEventList+0xb4>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <xTaskRemoveFromEventList+0xb8>)
 8003de6:	441a      	add	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f7fe fe05 	bl	80029fe <vListInsertEnd>
 8003df4:	e005      	b.n	8003e02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	480e      	ldr	r0, [pc, #56]	; (8003e38 <xTaskRemoveFromEventList+0xbc>)
 8003dfe:	f7fe fdfe 	bl	80029fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <xTaskRemoveFromEventList+0xc0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d905      	bls.n	8003e1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <xTaskRemoveFromEventList+0xc4>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e001      	b.n	8003e20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e20:	697b      	ldr	r3, [r7, #20]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000cf4 	.word	0x20000cf4
 8003e30:	20000cd4 	.word	0x20000cd4
 8003e34:	200007fc 	.word	0x200007fc
 8003e38:	20000c8c 	.word	0x20000c8c
 8003e3c:	200007f8 	.word	0x200007f8
 8003e40:	20000ce0 	.word	0x20000ce0

08003e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <vTaskInternalSetTimeOutState+0x24>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <vTaskInternalSetTimeOutState+0x28>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000ce4 	.word	0x20000ce4
 8003e6c:	20000cd0 	.word	0x20000cd0

08003e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	613b      	str	r3, [r7, #16]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60fb      	str	r3, [r7, #12]
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003eb2:	f000 fe0b 	bl	8004acc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <xTaskCheckForTimeOut+0xbc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d102      	bne.n	8003ed6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e023      	b.n	8003f1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <xTaskCheckForTimeOut+0xc0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d007      	beq.n	8003ef2 <xTaskCheckForTimeOut+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d302      	bcc.n	8003ef2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e015      	b.n	8003f1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d20b      	bcs.n	8003f14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff9b 	bl	8003e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e004      	b.n	8003f1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f1e:	f000 fe05 	bl	8004b2c <vPortExitCritical>

	return xReturn;
 8003f22:	69fb      	ldr	r3, [r7, #28]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000cd0 	.word	0x20000cd0
 8003f30:	20000ce4 	.word	0x20000ce4

08003f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <vTaskMissedYield+0x14>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000ce0 	.word	0x20000ce0

08003f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f54:	f000 f852 	bl	8003ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <prvIdleTask+0x28>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d9f9      	bls.n	8003f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <prvIdleTask+0x2c>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f70:	e7f0      	b.n	8003f54 <prvIdleTask+0x8>
 8003f72:	bf00      	nop
 8003f74:	200007fc 	.word	0x200007fc
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	e00c      	b.n	8003fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <prvInitialiseTaskLists+0x60>)
 8003f94:	4413      	add	r3, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fd06 	bl	80029a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b37      	cmp	r3, #55	; 0x37
 8003fa6:	d9ef      	bls.n	8003f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fa8:	480d      	ldr	r0, [pc, #52]	; (8003fe0 <prvInitialiseTaskLists+0x64>)
 8003faa:	f7fe fcfd 	bl	80029a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fae:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <prvInitialiseTaskLists+0x68>)
 8003fb0:	f7fe fcfa 	bl	80029a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fb4:	480c      	ldr	r0, [pc, #48]	; (8003fe8 <prvInitialiseTaskLists+0x6c>)
 8003fb6:	f7fe fcf7 	bl	80029a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fba:	480c      	ldr	r0, [pc, #48]	; (8003fec <prvInitialiseTaskLists+0x70>)
 8003fbc:	f7fe fcf4 	bl	80029a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fc0:	480b      	ldr	r0, [pc, #44]	; (8003ff0 <prvInitialiseTaskLists+0x74>)
 8003fc2:	f7fe fcf1 	bl	80029a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <prvInitialiseTaskLists+0x78>)
 8003fc8:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <prvInitialiseTaskLists+0x64>)
 8003fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <prvInitialiseTaskLists+0x7c>)
 8003fce:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <prvInitialiseTaskLists+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200007fc 	.word	0x200007fc
 8003fe0:	20000c5c 	.word	0x20000c5c
 8003fe4:	20000c70 	.word	0x20000c70
 8003fe8:	20000c8c 	.word	0x20000c8c
 8003fec:	20000ca0 	.word	0x20000ca0
 8003ff0:	20000cb8 	.word	0x20000cb8
 8003ff4:	20000c84 	.word	0x20000c84
 8003ff8:	20000c88 	.word	0x20000c88

08003ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004002:	e019      	b.n	8004038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004004:	f000 fd62 	bl	8004acc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <prvCheckTasksWaitingTermination+0x50>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fd4d 	bl	8002ab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <prvCheckTasksWaitingTermination+0x54>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3b01      	subs	r3, #1
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <prvCheckTasksWaitingTermination+0x54>)
 8004022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 800402c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800402e:	f000 fd7d 	bl	8004b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f810 	bl	8004058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <prvCheckTasksWaitingTermination+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e1      	bne.n	8004004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000ca0 	.word	0x20000ca0
 8004050:	20000ccc 	.word	0x20000ccc
 8004054:	20000cb4 	.word	0x20000cb4

08004058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fef0 	bl	8004e54 <vPortFree>
				vPortFree( pxTCB );
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 feed 	bl	8004e54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800407a:	e018      	b.n	80040ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004082:	2b01      	cmp	r3, #1
 8004084:	d103      	bne.n	800408e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fee4 	bl	8004e54 <vPortFree>
	}
 800408c:	e00f      	b.n	80040ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004094:	2b02      	cmp	r3, #2
 8004096:	d00a      	beq.n	80040ae <prvDeleteTCB+0x56>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	60fb      	str	r3, [r7, #12]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <prvDeleteTCB+0x54>
	}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <prvResetNextTaskUnblockTime+0x40>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <prvResetNextTaskUnblockTime+0x14>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <prvResetNextTaskUnblockTime+0x16>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <prvResetNextTaskUnblockTime+0x44>)
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040da:	e008      	b.n	80040ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <prvResetNextTaskUnblockTime+0x40>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <prvResetNextTaskUnblockTime+0x44>)
 80040ec:	6013      	str	r3, [r2, #0]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	20000c84 	.word	0x20000c84
 80040fc:	20000cec 	.word	0x20000cec

08004100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <xTaskGetSchedulerState+0x34>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800410e:	2301      	movs	r3, #1
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	e008      	b.n	8004126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <xTaskGetSchedulerState+0x38>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800411c:	2302      	movs	r3, #2
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	e001      	b.n	8004126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004126:	687b      	ldr	r3, [r7, #4]
	}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000cd8 	.word	0x20000cd8
 8004138:	20000cf4 	.word	0x20000cf4

0800413c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d056      	beq.n	8004200 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004152:	4b2e      	ldr	r3, [pc, #184]	; (800420c <xTaskPriorityDisinherit+0xd0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d00a      	beq.n	8004172 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	60fb      	str	r3, [r7, #12]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	60bb      	str	r3, [r7, #8]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d02c      	beq.n	8004200 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d128      	bne.n	8004200 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fc7e 	bl	8002ab4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <xTaskPriorityDisinherit+0xd4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d903      	bls.n	80041e0 <xTaskPriorityDisinherit+0xa4>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <xTaskPriorityDisinherit+0xd4>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4a09      	ldr	r2, [pc, #36]	; (8004214 <xTaskPriorityDisinherit+0xd8>)
 80041ee:	441a      	add	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f7fe fc01 	bl	80029fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004200:	697b      	ldr	r3, [r7, #20]
	}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200007f8 	.word	0x200007f8
 8004210:	20000cd4 	.word	0x20000cd4
 8004214:	200007fc 	.word	0x200007fc

08004218 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fc40 	bl	8002ab4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d10a      	bne.n	8004252 <prvAddCurrentTaskToDelayedList+0x3a>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800424c:	f7fe fbd7 	bl	80029fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004250:	e026      	b.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	429a      	cmp	r2, r3
 8004268:	d209      	bcs.n	800427e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe fbe4 	bl	8002a44 <vListInsert>
}
 800427c:	e010      	b.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f7fe fbda 	bl	8002a44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d202      	bcs.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000cd0 	.word	0x20000cd0
 80042ac:	200007f8 	.word	0x200007f8
 80042b0:	20000cb8 	.word	0x20000cb8
 80042b4:	20000c88 	.word	0x20000c88
 80042b8:	20000c84 	.word	0x20000c84
 80042bc:	20000cec 	.word	0x20000cec

080042c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042ca:	f000 facb 	bl	8004864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <xTimerCreateTimerTask+0x80>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d021      	beq.n	800431a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042de:	1d3a      	adds	r2, r7, #4
 80042e0:	f107 0108 	add.w	r1, r7, #8
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fb43 	bl	8002974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	9202      	str	r2, [sp, #8]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	2302      	movs	r3, #2
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	460a      	mov	r2, r1
 8004300:	4910      	ldr	r1, [pc, #64]	; (8004344 <xTimerCreateTimerTask+0x84>)
 8004302:	4811      	ldr	r0, [pc, #68]	; (8004348 <xTimerCreateTimerTask+0x88>)
 8004304:	f7ff f8e4 	bl	80034d0 <xTaskCreateStatic>
 8004308:	4603      	mov	r3, r0
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <xTimerCreateTimerTask+0x8c>)
 800430c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <xTimerCreateTimerTask+0x8c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000d28 	.word	0x20000d28
 8004344:	08005144 	.word	0x08005144
 8004348:	0800446d 	.word	0x0800446d
 800434c:	20000d2c 	.word	0x20000d2c

08004350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <xTimerGenericCommand+0x98>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	dc18      	bgt.n	80043ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004398:	f7ff feb2 	bl	8004100 <xTaskGetSchedulerState>
 800439c:	4603      	mov	r3, r0
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d109      	bne.n	80043b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f107 0110 	add.w	r1, r7, #16
 80043aa:	2300      	movs	r3, #0
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	f7fe fcad 	bl	8002d0c <xQueueGenericSend>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24
 80043b4:	e012      	b.n	80043dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f107 0110 	add.w	r1, r7, #16
 80043be:	2300      	movs	r3, #0
 80043c0:	2200      	movs	r2, #0
 80043c2:	f7fe fca3 	bl	8002d0c <xQueueGenericSend>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24
 80043c8:	e008      	b.n	80043dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f107 0110 	add.w	r1, r7, #16
 80043d2:	2300      	movs	r3, #0
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f7fe fd97 	bl	8002f08 <xQueueGenericSendFromISR>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000d28 	.word	0x20000d28

080043ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <prvProcessExpiredTimer+0x7c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fb55 	bl	8002ab4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d122      	bne.n	8004458 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	18d1      	adds	r1, r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f000 f8c8 	bl	80045b4 <prvInsertTimerInActiveList>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800442a:	2300      	movs	r3, #0
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	2100      	movs	r1, #0
 8004434:	6978      	ldr	r0, [r7, #20]
 8004436:	f7ff ff8b 	bl	8004350 <xTimerGenericCommand>
 800443a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	6978      	ldr	r0, [r7, #20]
 800445e:	4798      	blx	r3
}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000d20 	.word	0x20000d20

0800446c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f857 	bl	800452c <prvGetNextExpireTime>
 800447e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4619      	mov	r1, r3
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f803 	bl	8004490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800448a:	f000 f8d5 	bl	8004638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800448e:	e7f1      	b.n	8004474 <prvTimerTask+0x8>

08004490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800449a:	f7ff fa4b 	bl	8003934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f866 	bl	8004574 <prvSampleTimeNow>
 80044a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d130      	bne.n	8004512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <prvProcessTimerOrBlockTask+0x3c>
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d806      	bhi.n	80044cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044be:	f7ff fa47 	bl	8003950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff91 	bl	80043ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044ca:	e024      	b.n	8004516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <prvProcessTimerOrBlockTask+0x90>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <prvProcessTimerOrBlockTask+0x94>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fe ffb9 	bl	8003468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044f6:	f7ff fa2b 	bl	8003950 <xTaskResumeAll>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <prvProcessTimerOrBlockTask+0x98>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
}
 8004510:	e001      	b.n	8004516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004512:	f7ff fa1d 	bl	8003950 <xTaskResumeAll>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000d24 	.word	0x20000d24
 8004524:	20000d28 	.word	0x20000d28
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <prvGetNextExpireTime+0x44>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <prvGetNextExpireTime+0x44>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e001      	b.n	8004562 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000d20 	.word	0x20000d20

08004574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800457c:	f7ff fa86 	bl	8003a8c <xTaskGetTickCount>
 8004580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <prvSampleTimeNow+0x3c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d205      	bcs.n	8004598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800458c:	f000 f908 	bl	80047a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e002      	b.n	800459e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <prvSampleTimeNow+0x3c>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000d30 	.word	0x20000d30

080045b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d812      	bhi.n	8004600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e01b      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <prvInsertTimerInActiveList+0x7c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe fa23 	bl	8002a44 <vListInsert>
 80045fe:	e012      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d206      	bcs.n	8004616 <prvInsertTimerInActiveList+0x62>
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e007      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <prvInsertTimerInActiveList+0x80>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7fe fa0f 	bl	8002a44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004626:	697b      	ldr	r3, [r7, #20]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000d24 	.word	0x20000d24
 8004634:	20000d20 	.word	0x20000d20

08004638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800463e:	e09d      	b.n	800477c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da18      	bge.n	8004678 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	3304      	adds	r3, #4
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	61fb      	str	r3, [r7, #28]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466e:	6850      	ldr	r0, [r2, #4]
 8004670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	4611      	mov	r1, r2
 8004676:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db7d      	blt.n	800477a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	3304      	adds	r3, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fa10 	bl	8002ab4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004694:	463b      	mov	r3, r7
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff6c 	bl	8004574 <prvSampleTimeNow>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d86b      	bhi.n	800477c <prvProcessReceivedCommands+0x144>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <prvProcessReceivedCommands+0x74>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046d5 	.word	0x080046d5
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046d5 	.word	0x080046d5
 80046b8:	0800477d 	.word	0x0800477d
 80046bc:	08004731 	.word	0x08004731
 80046c0:	08004769 	.word	0x08004769
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046d5 	.word	0x080046d5
 80046cc:	0800477d 	.word	0x0800477d
 80046d0:	08004731 	.word	0x08004731
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	18d1      	adds	r1, r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e2:	f7ff ff67 	bl	80045b4 <prvInsertTimerInActiveList>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d047      	beq.n	800477c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d13f      	bne.n	800477c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	441a      	add	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2100      	movs	r1, #0
 800470c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470e:	f7ff fe1f 	bl	8004350 <xTimerGenericCommand>
 8004712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d130      	bne.n	800477c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61bb      	str	r3, [r7, #24]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	617b      	str	r3, [r7, #20]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	18d1      	adds	r1, r2, r3
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004762:	f7ff ff27 	bl	80045b4 <prvInsertTimerInActiveList>
					break;
 8004766:	e009      	b.n	800477c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004774:	f000 fb6e 	bl	8004e54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004778:	e000      	b.n	800477c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800477a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <prvProcessReceivedCommands+0x164>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1d39      	adds	r1, r7, #4
 8004782:	2200      	movs	r2, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fc57 	bl	8003038 <xQueueReceive>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f af57 	bne.w	8004640 <prvProcessReceivedCommands+0x8>
	}
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	3730      	adds	r7, #48	; 0x30
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000d28 	.word	0x20000d28

080047a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047a6:	e045      	b.n	8004834 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047a8:	4b2c      	ldr	r3, [pc, #176]	; (800485c <prvSwitchTimerLists+0xbc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <prvSwitchTimerLists+0xbc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3304      	adds	r3, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe f977 	bl	8002ab4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d12e      	bne.n	8004834 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d90e      	bls.n	8004806 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <prvSwitchTimerLists+0xbc>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe f920 	bl	8002a44 <vListInsert>
 8004804:	e016      	b.n	8004834 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004806:	2300      	movs	r3, #0
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	2100      	movs	r1, #0
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff fd9d 	bl	8004350 <xTimerGenericCommand>
 8004816:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <prvSwitchTimerLists+0x94>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	603b      	str	r3, [r7, #0]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <prvSwitchTimerLists+0xbc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1b4      	bne.n	80047a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvSwitchTimerLists+0xbc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <prvSwitchTimerLists+0xc0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <prvSwitchTimerLists+0xbc>)
 800484a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <prvSwitchTimerLists+0xc0>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	6013      	str	r3, [r2, #0]
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000d20 	.word	0x20000d20
 8004860:	20000d24 	.word	0x20000d24

08004864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800486a:	f000 f92f 	bl	8004acc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <prvCheckForValidListAndQueue+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d120      	bne.n	80048b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004876:	4814      	ldr	r0, [pc, #80]	; (80048c8 <prvCheckForValidListAndQueue+0x64>)
 8004878:	f7fe f896 	bl	80029a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800487c:	4813      	ldr	r0, [pc, #76]	; (80048cc <prvCheckForValidListAndQueue+0x68>)
 800487e:	f7fe f893 	bl	80029a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004882:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <prvCheckForValidListAndQueue+0x6c>)
 8004884:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <prvCheckForValidListAndQueue+0x64>)
 8004886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <prvCheckForValidListAndQueue+0x70>)
 800488a:	4a10      	ldr	r2, [pc, #64]	; (80048cc <prvCheckForValidListAndQueue+0x68>)
 800488c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <prvCheckForValidListAndQueue+0x74>)
 8004894:	4a11      	ldr	r2, [pc, #68]	; (80048dc <prvCheckForValidListAndQueue+0x78>)
 8004896:	2110      	movs	r1, #16
 8004898:	200a      	movs	r0, #10
 800489a:	f7fe f99d 	bl	8002bd8 <xQueueGenericCreateStatic>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <prvCheckForValidListAndQueue+0x60>)
 80048a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <prvCheckForValidListAndQueue+0x60>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <prvCheckForValidListAndQueue+0x60>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	490b      	ldr	r1, [pc, #44]	; (80048e0 <prvCheckForValidListAndQueue+0x7c>)
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fdb0 	bl	8003418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048b8:	f000 f938 	bl	8004b2c <vPortExitCritical>
}
 80048bc:	bf00      	nop
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000d28 	.word	0x20000d28
 80048c8:	20000cf8 	.word	0x20000cf8
 80048cc:	20000d0c 	.word	0x20000d0c
 80048d0:	20000d20 	.word	0x20000d20
 80048d4:	20000d24 	.word	0x20000d24
 80048d8:	20000dd4 	.word	0x20000dd4
 80048dc:	20000d34 	.word	0x20000d34
 80048e0:	0800514c 	.word	0x0800514c

080048e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b04      	subs	r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3b04      	subs	r3, #4
 8004902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b04      	subs	r3, #4
 8004912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <pxPortInitialiseStack+0x54>)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b14      	subs	r3, #20
 800491e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3b20      	subs	r3, #32
 800492a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800492c:	68fb      	ldr	r3, [r7, #12]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	0800493d 	.word	0x0800493d

0800493c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <prvTaskExitError+0x54>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d00a      	beq.n	8004966 <prvTaskExitError+0x2a>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <prvTaskExitError+0x28>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60bb      	str	r3, [r7, #8]
}
 8004978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800497a:	bf00      	nop
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0fc      	beq.n	800497c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000014 	.word	0x20000014
	...

080049a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <pxCurrentTCBConst2>)
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	6808      	ldr	r0, [r1, #0]
 80049a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049aa:	f380 8809 	msr	PSP, r0
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8811 	msr	BASEPRI, r0
 80049ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80049be:	4770      	bx	lr

080049c0 <pxCurrentTCBConst2>:
 80049c0:	200007f8 	.word	0x200007f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049c8:	4806      	ldr	r0, [pc, #24]	; (80049e4 <prvPortStartFirstTask+0x1c>)
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	6800      	ldr	r0, [r0, #0]
 80049ce:	f380 8808 	msr	MSP, r0
 80049d2:	b662      	cpsie	i
 80049d4:	b661      	cpsie	f
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	df00      	svc	0
 80049e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049e2:	bf00      	nop
 80049e4:	e000ed08 	.word	0xe000ed08

080049e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ee:	4b32      	ldr	r3, [pc, #200]	; (8004ab8 <xPortStartScheduler+0xd0>)
 80049f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <xPortStartScheduler+0xd4>)
 8004a14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a18:	2207      	movs	r2, #7
 8004a1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a1c:	e009      	b.n	8004a32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d0ef      	beq.n	8004a1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a3e:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1c3 0307 	rsb	r3, r3, #7
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d00a      	beq.n	8004a60 <xPortStartScheduler+0x78>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60bb      	str	r3, [r7, #8]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a72:	4a13      	ldr	r2, [pc, #76]	; (8004ac0 <xPortStartScheduler+0xd8>)
 8004a74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <xPortStartScheduler+0xdc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <xPortStartScheduler+0xdc>)
 8004a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <xPortStartScheduler+0xdc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a0d      	ldr	r2, [pc, #52]	; (8004ac4 <xPortStartScheduler+0xdc>)
 8004a90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a96:	f000 f8b9 	bl	8004c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <xPortStartScheduler+0xe0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa0:	f7ff ff92 	bl	80049c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aa4:	f7ff f8be 	bl	8003c24 <vTaskSwitchContext>
	prvTaskExitError();
 8004aa8:	f7ff ff48 	bl	800493c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	e000e400 	.word	0xe000e400
 8004abc:	20000e24 	.word	0x20000e24
 8004ac0:	20000e28 	.word	0x20000e28
 8004ac4:	e000ed20 	.word	0xe000ed20
 8004ac8:	20000014 	.word	0x20000014

08004acc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	607b      	str	r3, [r7, #4]
}
 8004ae4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <vPortEnterCritical+0x58>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <vPortEnterCritical+0x58>)
 8004aee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <vPortEnterCritical+0x58>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10f      	bne.n	8004b18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <vPortEnterCritical+0x5c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	603b      	str	r3, [r7, #0]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vPortEnterCritical+0x4a>
	}
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000014 	.word	0x20000014
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <vPortExitCritical+0x4c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <vPortExitCritical+0x24>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	607b      	str	r3, [r7, #4]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <vPortExitCritical+0x4c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <vPortExitCritical+0x4c>)
 8004b58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <vPortExitCritical+0x4c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <vPortExitCritical+0x42>
 8004b62:	2300      	movs	r3, #0
 8004b64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f383 8811 	msr	BASEPRI, r3
}
 8004b6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000014 	.word	0x20000014
 8004b7c:	00000000 	.word	0x00000000

08004b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b80:	f3ef 8009 	mrs	r0, PSP
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <pxCurrentTCBConst>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b90:	6010      	str	r0, [r2, #0]
 8004b92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b9a:	f380 8811 	msr	BASEPRI, r0
 8004b9e:	f7ff f841 	bl	8003c24 <vTaskSwitchContext>
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8811 	msr	BASEPRI, r0
 8004baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	6808      	ldr	r0, [r1, #0]
 8004bb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bb6:	f380 8809 	msr	PSP, r0
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	4770      	bx	lr

08004bc0 <pxCurrentTCBConst>:
 8004bc0:	200007f8 	.word	0x200007f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004be2:	f7fe ff61 	bl	8003aa8 <xTaskIncrementTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <xPortSysTickHandler+0x40>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f383 8811 	msr	BASEPRI, r3
}
 8004bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <vPortSetupTimerInterrupt+0x30>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <vPortSetupTimerInterrupt+0x34>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <vPortSetupTimerInterrupt+0x38>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <vPortSetupTimerInterrupt+0x3c>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <vPortSetupTimerInterrupt+0x40>)
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c2e:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <vPortSetupTimerInterrupt+0x30>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e010 	.word	0xe000e010
 8004c40:	e000e018 	.word	0xe000e018
 8004c44:	20000008 	.word	0x20000008
 8004c48:	10624dd3 	.word	0x10624dd3
 8004c4c:	e000e014 	.word	0xe000e014

08004c50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c56:	f3ef 8305 	mrs	r3, IPSR
 8004c5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d914      	bls.n	8004c8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <vPortValidateInterruptPriority+0x6c>)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <vPortValidateInterruptPriority+0x70>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	7afa      	ldrb	r2, [r7, #11]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d20a      	bcs.n	8004c8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	607b      	str	r3, [r7, #4]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <vPortValidateInterruptPriority+0x74>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <vPortValidateInterruptPriority+0x78>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d90a      	bls.n	8004cb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	603b      	str	r3, [r7, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <vPortValidateInterruptPriority+0x60>
	}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	e000e3f0 	.word	0xe000e3f0
 8004cc0:	20000e24 	.word	0x20000e24
 8004cc4:	e000ed0c 	.word	0xe000ed0c
 8004cc8:	20000e28 	.word	0x20000e28

08004ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cd8:	f7fe fe2c 	bl	8003934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cdc:	4b58      	ldr	r3, [pc, #352]	; (8004e40 <pvPortMalloc+0x174>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ce4:	f000 f910 	bl	8004f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ce8:	4b56      	ldr	r3, [pc, #344]	; (8004e44 <pvPortMalloc+0x178>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 808e 	bne.w	8004e12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01d      	beq.n	8004d38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f023 0307 	bic.w	r3, r3, #7
 8004d14:	3308      	adds	r3, #8
 8004d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <pvPortMalloc+0x6c>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	617b      	str	r3, [r7, #20]
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d069      	beq.n	8004e12 <pvPortMalloc+0x146>
 8004d3e:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <pvPortMalloc+0x17c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d864      	bhi.n	8004e12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d48:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <pvPortMalloc+0x180>)
 8004d4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <pvPortMalloc+0x180>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d52:	e004      	b.n	8004d5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d903      	bls.n	8004d70 <pvPortMalloc+0xa4>
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f1      	bne.n	8004d54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d70:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <pvPortMalloc+0x174>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d04b      	beq.n	8004e12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2208      	movs	r2, #8
 8004d80:	4413      	add	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	2308      	movs	r3, #8
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d91f      	bls.n	8004ddc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <pvPortMalloc+0xf8>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	613b      	str	r3, [r7, #16]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dd6:	69b8      	ldr	r0, [r7, #24]
 8004dd8:	f000 f8f8 	bl	8004fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <pvPortMalloc+0x17c>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <pvPortMalloc+0x17c>)
 8004de8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dea:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <pvPortMalloc+0x17c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <pvPortMalloc+0x184>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d203      	bcs.n	8004dfe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <pvPortMalloc+0x17c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <pvPortMalloc+0x184>)
 8004dfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <pvPortMalloc+0x178>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e12:	f7fe fd9d 	bl	8003950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <pvPortMalloc+0x16a>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <pvPortMalloc+0x168>
	return pvReturn;
 8004e36:	69fb      	ldr	r3, [r7, #28]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3728      	adds	r7, #40	; 0x28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001a34 	.word	0x20001a34
 8004e44:	20001a40 	.word	0x20001a40
 8004e48:	20001a38 	.word	0x20001a38
 8004e4c:	20001a2c 	.word	0x20001a2c
 8004e50:	20001a3c 	.word	0x20001a3c

08004e54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d048      	beq.n	8004ef8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e66:	2308      	movs	r3, #8
 8004e68:	425b      	negs	r3, r3
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <vPortFree+0xac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <vPortFree+0x44>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60fb      	str	r3, [r7, #12]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <vPortFree+0x62>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60bb      	str	r3, [r7, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <vPortFree+0xac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d019      	beq.n	8004ef8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d115      	bne.n	8004ef8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortFree+0xac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004edc:	f7fe fd2a 	bl	8003934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <vPortFree+0xb0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a06      	ldr	r2, [pc, #24]	; (8004f04 <vPortFree+0xb0>)
 8004eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f000 f86c 	bl	8004fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ef4:	f7fe fd2c 	bl	8003950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ef8:	bf00      	nop
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20001a40 	.word	0x20001a40
 8004f04:	20001a38 	.word	0x20001a38

08004f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <prvHeapInit+0xac>)
 8004f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3307      	adds	r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <prvHeapInit+0xac>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <prvHeapInit+0xb0>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f46:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <prvHeapInit+0xb0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f54:	2208      	movs	r2, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <prvHeapInit+0xb4>)
 8004f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <prvHeapInit+0xb4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <prvHeapInit+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvHeapInit+0xb4>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <prvHeapInit+0xb8>)
 8004f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <prvHeapInit+0xbc>)
 8004f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <prvHeapInit+0xc0>)
 8004fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000e2c 	.word	0x20000e2c
 8004fb8:	20001a2c 	.word	0x20001a2c
 8004fbc:	20001a34 	.word	0x20001a34
 8004fc0:	20001a3c 	.word	0x20001a3c
 8004fc4:	20001a38 	.word	0x20001a38
 8004fc8:	20001a40 	.word	0x20001a40

08004fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <prvInsertBlockIntoFreeList+0xa8>)
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <prvInsertBlockIntoFreeList+0x14>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d8f7      	bhi.n	8004fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d108      	bne.n	800500e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	441a      	add	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	441a      	add	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d118      	bne.n	8005054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <prvInsertBlockIntoFreeList+0xac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d00d      	beq.n	800504a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e008      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <prvInsertBlockIntoFreeList+0xac>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e003      	b.n	800505c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d002      	beq.n	800506a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	20001a2c 	.word	0x20001a2c
 8005078:	20001a34 	.word	0x20001a34

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	2600      	movs	r6, #0
 8005080:	4d0c      	ldr	r5, [pc, #48]	; (80050b4 <__libc_init_array+0x38>)
 8005082:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	f000 f830 	bl	80050f0 <_init>
 8005090:	2600      	movs	r6, #0
 8005092:	4d0a      	ldr	r5, [pc, #40]	; (80050bc <__libc_init_array+0x40>)
 8005094:	4c0a      	ldr	r4, [pc, #40]	; (80050c0 <__libc_init_array+0x44>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	080051d8 	.word	0x080051d8
 80050b8:	080051d8 	.word	0x080051d8
 80050bc:	080051d8 	.word	0x080051d8
 80050c0:	080051dc 	.word	0x080051dc

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <memset>:
 80050e0:	4603      	mov	r3, r0
 80050e2:	4402      	add	r2, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d100      	bne.n	80050ea <memset+0xa>
 80050e8:	4770      	bx	lr
 80050ea:	f803 1b01 	strb.w	r1, [r3], #1
 80050ee:	e7f9      	b.n	80050e4 <memset+0x4>

080050f0 <_init>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr

080050fc <_fini>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr
